<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #><#+

const int MaxVertexBufferCount = 3;
const int MaxUniformBufferBlocks = 1;

void WriteLines(int count, Func<int, string> writeLine, int indent = 0)
{
    for (int i = 1; i <= count; i++)
    {
        Write(new String(' ', 4 * indent));
        WriteLine(writeLine(i));
    }
}

void WriteLineIf(bool predicate, string line = "", int indent = 0)
{
    if (predicate)
    {
        Write(new String(' ', 4 * indent));
        WriteLine(line);
    }
}

void WriteTypeParamDocs(int count, Func<int, string> desc, int indent = 0)
{
    WriteTypeParamDocs(count, i => $"T{i}", desc, indent);
}

void WriteTypeParamDocs(int count, Func<int, string> paramName, Func<int, string> desc, int indent = 0)
{
    for (int i = 1; i <= count; i++)
    {
        Write(new String(' ', 4 * indent));
        WriteLine($"/// <typeparam name=\"{paramName(i)}\">{desc(i)}</typeparam>");
    }
}

IEnumerable<string> TypeParamNames(int i) => Enumerable.Range(1, i).Select(i => $"T{i}");

string List(
    int count,
    Func<int, string> itemValue,
    string nonZeroPrefix = "",
    string nonZeroSuffix = "")
{
    var prefix = count > 0 ? nonZeroPrefix : "";
    var suffix = count > 0 ? nonZeroSuffix : "";
    return $"{prefix}{string.Join(", ", Enumerable.Range(1, count).Select(itemValue))}{suffix}";
}

string TList(
    int count,
    string nonZeroPrefix = "",
    string nonZeroSuffix = "")
{
    return List(count, i => $"T{i}", nonZeroPrefix, nonZeroSuffix);
}

string WriteIfTrue(bool predicate, string write) => predicate ? write : string.Empty;

string Ordinal(int i)
{
    if ((i / 10) % 10 == 1)
    {
        return $"{i}th";
    }
    else return (i % 10) switch 
    {
        1 => $"{i}st",
        2 => $"{i}nd",
        3 => $"{i}rd",
        _ => $"{i}th"
    };
}

string Plural(int i) => i == 1 ? string.Empty : "s";

#>